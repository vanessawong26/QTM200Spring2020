#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
plot(predict(model1) resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
plot(predict(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0)
plot(model1)
plot(predict(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
lines(smooth.spline(fitted(model1), residuals(model1)))
abline(0, 0, lty=2)
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess") +
geom_hline(yintercept=0, col="red", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals")
lapply(c("faraway", "ggplot2"),  pkgTest)
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess") +
geom_hline(yintercept=0, col="red", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals")
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess") +
geom_hline(yintercept=0, col="red", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
# open up plot of residuals and fitted values
pdf("constant_variance1.pdf")
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
dev.off()
pdf("constant_variance2.pdf")
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
dev.off()
# create quantile comparison plot check normality of studentized residuals
pdf("QQplot.pdf")
qqPlot(mod1, main="Figure 1", ylab="Studentized Residuals")
dev.off()
qqPlot(model1, ylab="Studentized Residuals")
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE, pch=1) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE, shape=1) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE, aes(shape=1)) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
plot(model1)
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
