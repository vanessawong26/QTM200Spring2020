# y = voteshare (outcome)
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
X <- cbind(incumbents$difflog, incumbents$presvote)
xmatrix <- matrix(c(incumbents$difflog, incumbents$presvote), nrow=2, byrow=T)
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
# check work
lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
# linear model: y = 0.4486 + 0.0355xdifflog + 0.2569xpresvote
betas
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
# check work
lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
#row1 = difflog
#row2 = presvote
betas <- (1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
display(betas)
display(betas)
betas
display(betas)
# check work
lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
# linear model: y = 0.4486 + 0.0355xdifflog + 0.2569xpresvote
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
xmatrix <- matrix(c(incumbents$difflog, incumbents$presvote), nrow=2, byrow=T)
xmatrix <- matrix(c(incumbents$difflog, incumbents$presvote), nrow=2, byrow=T)
#row1 = difflog
#row2 = presvote
betas <- (1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
display(betas)
xmatrix <- matrix(c(incumbents$difflog, incumbents$presvote), nrow=2, byrow=T)
#row1 = difflog
#row2 = presvote
betas <- (1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
display(betas)
#row1 = difflog
#row2 = presvote
betas <- (1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas <- (1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
lmbyhand <- function(inputDF, covariates, outcome){}
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
lmbyhand <- function(inputDF, covariates, outcome){
X2 <- as.matrix(cbind(rep(1, dim[inputDF][1]), inputDF[covariates]))
Y2 <- inputDF[,outcome]
betas2 <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas2)[1] <- "Intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
lmbyhand <- function(inputDF, covariates, outcome)
X2 <- as.matrix(cbind(rep(1, dim[inputDF][1]), inputDF[covariates]))
Y2 <- inputDF[,outcome]
betas2 <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas2)[1] <- "Intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
lmbyhand <- function(incumbents, covariates, outcome)
Y2 <- incumbents[,outcome]
n <- dim(incumbents)[1]
lmbyhand <- function(incumbents, covariates, outcome)
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
lmbyhand <- function(incumbents, covariates, outcome)
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
betas2
display(betas2
display(betas2)
display(betas2)
lmbyhand <- function(incumbents, covariates, outcome)
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
lmbyhand <- function(incumbents, covariates, outcome)
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
lmbyhand <- function(incumbents, covariates, outcome){
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)}
lmbyhand <- function(incumbents, covariates, outcome){
X2 <- as.matrix(cbind(rep(1, dim[incumbents][1]), incumbents[covariates]))
Y2 <- incumbents[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(incumbents)[1]
k <- ncol(X)}
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
lmbyhand <- function(inputDF, covariates, outcome){
X2 <- as.matrix(cbind(rep(1, dim[inputDF][1]), inputDF[,covariates]))
Y2 <- inputDF[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(inputDF)[1]
k <- ncol(X)}
lmbyhand <- function(inputDF, covariates, outcome){
X2 <- as.matrix(cbind(rep(1, dim[inputDF][1]), inputDF[,covariates]))
Y2 <- inputDF[,outcome]
betas2 <- solve((t(X2)%*%X2)) %*% (t(X2)%*%Y2)
rownames(betas2)[1] <- "Intercept"
n <- dim(inputDF)[1]
k <- ncol(X2)}
reg_results <- lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
reg_results
lmbyhand(incumbents, c("difflog", "presvote"), "voteshare")
# check work
multireg <- lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
summary(multireg)
# check work
multireg <- lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
summary(multireg)
multireg2 <- lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)
summary(multireg2)
plot(incumbents$difflog, incumbents$voteshare,
xlab="difflog", ylab="voteshare")
abline(a=0.5790, b=0.0417, col="red")
# make a scatterplot of the two variables and add the regression line
plot(incumbents$difflog, incumbents$voteshare,
xlab="Difference between incumbent and challenger campaign spending", ylab="Incumbent vote share")
plot(incumbents$difflog, incumbents$voteshare,
xlab="Difference between incumbent and challenger campaign spending", ylab="Incumbent vote share")
abline(a=0.5790, b=0.0417, col="red")
plot(incumbents$difflog, incumbents$presvote,
xlab="difflog", ylab="presvote")
abline(a=0.5076, b=0.0238, col="red")
plot(incumbents$difflog, incumbents$presvote,
xlab="Difference between incumbent and challenger campaign spending", ylab="Vote share of presidential candidate of incumbent's party")
abline(a=0.5076, b=0.0238, col="red")
# make a scatterplot of the two variables and add the regression line
plot(incumbents$difflog, incumbents$presvote,
xlab="Difference between incumbent and challenger campaign spending", ylab="Vote share")
abline(a=0.5076, b=0.0238, col="red")
plot(incumbents$presvote, incumbents$voteshare,
xlab="presvote", ylab="voteshare")
abline(a=0.4413, b=0.3880, col="red")
# make a scatterplot of the two variables and add the regression line
plot(incumbents$presvote, incumbents$voteshare,
xlab="presvote", ylab="voteshare")
abline(a=0.4413, b=0.3880, col="red")
plot(resids2, residscheck,
xlab="Q2 Residuals", ylab="Q1 Residuals")
abline(reg4, col="red")
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
X3 <- cbind(incumbents$difflog, incumbents$presvote)
X3
summary(incumbents)
dim(incumbents)[1]
# [,1] = difflog
# [,2] = presvote
Y3 <- matrix(incumbents$voteshare)
Y3
dim(incumbents)[1]
X3
# [,1] = difflog
# [,2] = presvote
Y3 <- matrix(incumbents$voteshare, nrow=2)
Y3
XtX <- t(X3) %*% X3
XtX <- t(X3) %*% X3
Xty <- t(X3) %*% Y3
XtX.inv <- solve(XtX)
b <- XtX.inv %*% Xty
Y3 <- matrix(incumbents$voteshare)
Y3
XtX <- t(X3) %*% X3
Xty <- t(X3) %*% Y3
XtX.inv <- solve(XtX)
b <- XtX.inv %*% Xty
dim(incumbents)[1]
b <- XtX.inv %*% Xty
b
# check work
lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
X3 <- cbind(incumbents$difflog, incumbents$presvote)
X3
# [,1] = difflog
# [,2] = presvote
Y3 <- matrix(incumbents$voteshare, nrow=3193)
Y3
XtX <- t(X3) %*% X3
Xty <- t(X3) %*% Y3
XtX.inv <- solve(XtX)
b <- XtX.inv %*% Xty
b
dim(incumbents)[1]
b
# [,1] = difflog
# [,2] = presvote
Y3 <- matrix(incumbents$voteshare, nrow=3193)
Y3
XtX <- t(X3) %*% X3
Xty <- t(X3) %*% Y3
XtX.inv <- solve(XtX)
b <- XtX.inv %*% Xty
b
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
X3 <- cbind(incumbents$difflog, incumbents$presvote)
X3
# [,1] = difflog
# [,2] = presvote
Y3 <- matrix(incumbents$voteshare, nrow=3193)
b
summary(multireg2)
b <- XtX.inv %*% Xty
Xty <- t(X3) %*% Y3
Xty
XtX
reg4
plot(resids2, residscheck,
xlab="Q2 Residuals", ylab="Q1 Residuals")
abline(reg4, col="red")
#####################################################
## File: Lab12.R                                   ##
## Interactions with Dummary Variables             ##
#####################################################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# set wd
setwd('~/Documents/GitHub/QTM200Spring2020/labs/Lab12')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("faraway"), pkgTest)
#######################
# Problems
#######################
# Some studies show that politically irrelevant events, such as
# sports events and shark attacks, affect voters' retrospective
# evaluation of government performance. For example, Busby et al.
# (2017) find that the outcome of a college football game affects
# presidental job approval among students.
load("Busby_Football.RData")
colnames(x)
load("Busby_Football.RData")
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# set wd
setwd('~/Documents/GitHub/QTM200Spring2020/labs/Lab12')
# set wd
setwd('~/GitHub/QTM200Spring2020/labs/Lab12')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("faraway"), pkgTest)
load("Busby_Football.RData")
colnames(x)
df <- "Busby_Football.RData"
lm(papprove~post+osu+post:osu, data=df)
lm(papprove~post+osu+post:osu, data=x)
lm(papprove ~ post+osu + post:osu, data=x)
names(x)
lm(papprove ~ Post+osu + Post:osu, data=x)
lm(papprove ~ Post+osu + Post:osu, data=x)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("stringr"),  pkgTest)
# set working directory, import datasets
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS4")
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
#####################
# Problem 1:
#####################
Prestige$profession
#####################
# Problem 1:
#####################
Prestige$type
ifelse(type == "prof", 1, ifelse(type == "bc", 0), ifelse(type == "wc", 0))
profession <- c("bc","prof", "wc")
ifelse(type == "prof", 1, ifelse(type == "bc", 0), ifelse(type == "wc", 0))
ifelse(type == "prof", 1, ifelse(type == "bc", "wc", 0))
ifelse(profession == "prof", 1, ifelse(profession == "bc", "wc", 0))
ifelse(profession == "prof", 1, ifelse(profession == "bc", "wc", 0))
profession <- c(type == "bc",type == "prof", type == "wc")
profession <- c(Prestige$type == "bc",Prestige$type == "prof", Prestige$type == "wc")
ifelse(type == "prof", 1, ifelse(type == "bc", "wc", 0))
ifelse(type == "prof", 1, ifelse(type == "bc", "wc", 0), data=Prestige)
ifelse(type == "prof", 1, ifelse(type == "bc", "wc", 0), data="Prestige"")
ifelse(type == "prof", 1, ifelse(type == "bc", "wc", 0), data="Prestige")
ifelse(Prestige$type == "prof", 1, ifelse(Prestige$type == "bc", "wc", 0))
ifelse(Prestige$type == "prof", 1, ifelse(Prestige$type == "bc", 0, ifelse(Prestige$type == "wc", 0))
profession
profession
ifelse(Prestige$type == "prof", 1, ifelse(Prestige$type == "bc", 0, ifelse(Prestige$type == "wc", 0))
profession <- c(Prestige$type == "bc",Prestige$type == "prof", Prestige$type == "wc")
profession <- c(Prestige$type == "bc",Prestige$type == "prof", Prestige$type == "wc")
Prestige$profession
View(Prestige)
profession <- c(Prestige$type[1:102])
profession
profession <- (Prestige$type[1:102])
profession
ifelse(profession == "prof", 1, ifelse(profession == "bc", 0, ifelse(profession == "wc", 0))
profession
ifelse(profession == "prof", 1)
Prestige$profession <- ifelse(profession == "prof", 1, ifelse(profession == "bc", 0, ifelse(profession == "wc", 0))
Prestige$profession
#####################
# Problem 1:
#####################
Prestige$type
Prestige$profession <- ifelse(profession == "prof", 1, 0)
Prestige$profession
View(Prestige)
#####################
# y = prestige (outcome variable)
# x = income, professional, interaction
reg1b <- lm(prestige ~ income + professional + income:professional, data=Prestige)
#####################
# y = prestige (outcome variable)
# x = income, professional, interaction
reg1b <- lm(prestige ~ income + profession + income:profession, data=Prestige)
summary(reg1b)
#####################
# prediction equation: y = 21.1422 + 0.00317xincome + 37.7813xprofession - 0.00233xincomexprofession
#####################
# For blue and white collar workers, a one unit increase in income (one dollar increase) is associated with a 0.00317 unit increase in prestige.
#####################
# On average, holding all other variables constant at their means, professionals have 37.813 more units of prestige than blue and white collar workers.
#####################
# Professional coded as 1
# expected prestige score = (21.1422 + 37.7813) + (0.00317 + (-0.00233))x
(21.1422 + 37.7813) + ((0.00317 + (-0.00233))*1000)
lower <- (21.1422 + 37.7813)
upper - lower
upper - lower
#####################
# prediction equation: y = 21.1422 + 0.00317xincome + 37.7813xprofession - 0.00233xincomexprofession
#####################
# For blue and white collar workers, a one unit increase in income (one dollar increase) is associated with a 0.00317 unit increase in prestige.
#####################
# On average, holding all other variables constant at their means, professionals have 37.813 more units of prestige than blue and white collar workers.
#####################
# Professional coded as 1
# expected prestige score = (21.1422 + 37.7813) + (0.00317 + (-0.00233))x
upper <- (21.1422 + 37.7813) + ((0.00317 + (-0.00233))*1000)
lower <- (21.1422 + 37.7813)
upper - lower
# expected change in prestige score for professional occupations as a result of a $1,000 increase in income is 0.84.
#####################
# Professional coded as 1
# Non-professional coded as 0
# prediction equation: y = 21.1422 + 0.00317xincome + 37.7813xprofession - 0.00233xincomexprofessionx
ynonprof <- 21.1422 + (0.00317*6000)
yprof <- 21.1422 + (0.00317*6000) + (37.7813*1) - (0.00233*6000*1)
yprof - ynonprof
2*pt(0.042, df=29)
#####################
# Problem 2:
#####################
ts <- 0.042/0.016
2*pt(ts, df=29)
#####################
# Problem 2:
#####################
ts <- (0.042/0.016)
#####################
# Problem 2:
#####################
ts <- (0.042/(0.016/sqrt(30))
2*pt(ts, df=29)
2*pt(ts, df=29)
#####################
# Problem 2:
#####################
ts <- (0.042/(0.016/sqrt(30))
#####################
# Problem 2:
#####################
ts <- (0.042/(0.016/(sqrt(30))
#####################
# Problem 2:
#####################
ts <- (0.042/(0.016/(sqrt(30))
2*pt(ts, df=29)
#####################
# Problem 2:
#####################
ts <- (0.042/(0.016/(sqrt(30)))
2*pt(ts, df=29)
2*pt(ts, df=29)
#####################
# Problem 2:
#####################
ts <- (0.042)/(0.016)
2*pt(ts, df=29)
2*pt(ts, df=29, lower.tail=FALSE)
#####################
# Problem 2:
#####################
ts <- (0.042)/(0.016)
2*pt(ts, df=29, lower.tail=FALSE)
# p = 0.0137 < 0.05. Therefore, we reject the null hypothesis that having yard signs in a precinct does not affect vote share.
#####################
ts2 <- (0.042/0.013)
# p = 0.0137 < 0.05. Therefore, we reject the null hypothesis that having yard signs in a precinct does not affect vote share.
#####################
ts2 <- (0.042)/(0.013)
2*pt(ts, df=75, lower.tail=FALSE)
