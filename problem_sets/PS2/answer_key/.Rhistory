# load in new data
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
# Step 1: Calculate the standard error
SE <- sd(y)/sqrt(n)
# Step 2: Calculate the test statistic for this hypothesis testing of mean
t <- (mean(y) - 100)/SE
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = T)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = F)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
t
pvalue
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = T)
pvalue
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/answer_key/PS2")
#####################
# Problem 1
#####################
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
test_statistic <- sum((abs(table - expectedValues))^2 / expectedValues)
df <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
# return values
return(list(statistic = test_statistic,
df = df,
p.value = p_value,
observed = observedValues,
expected = expectedValues))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# run chi square test with built in function
chisq.test(trafficViolations)
# use function to extract standardized residuals
chisq.test(trafficViolations)$stdres
#####################
# Problem 2
#####################
# read in women data from online .csv
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# run regression model with water regressed on whether there are reserved seats for women
regression_model1 <- lm(water ~ reserved, data = women)
# get summary of model with coefficient estimates
summary(regression_model1)
#####################
# Problem 3
#####################
# import the data set
fruitfly <- read.csv("fruitfly.csv")
# summarize the statistics in the data set
summary(fruitfly)
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_1.pdf")
hist(fruitfly$lifespan)
dev.off()
# import the data set
fruitfly <- read.csv("../fruitfly.csv")
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/answer_key/PS2")
#####################
# Problem 1
#####################
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS2/answer_key")
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS2/answer_key")
#####################
# Problem 1
# import the data set
fruitfly <- read.csv("../fruitfly.csv")
# summarize the statistics in the data set
summary(fruitfly)
# import the data set
fruitfly <- read.csv("../fruitfly.csv")
# summarize the statistics in the data set
summary(fruitfly)
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_1.pdf")
hist(fruitfly$lifespan)
dev.off()
hist(fruitfly$lifespan, main="")
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_1.pdf")
hist(fruitfly$lifespan, main="", x="Lifespan")
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_1.pdf")
hist(fruitfly$lifespan, main="", xlab="Lifespan")
dev.off()
# calculate correlation coefficient between lifespan and thorax
cor(fruitfly$thorax,fruitfly$lifespan)
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_a.pdf")
hist(fruitfly$lifespan, main="", xlab="Lifespan")
dev.off()
# (b) produce scatter plot between lifespan and thorax
pdf("plot3_b.pdf")
plot(fruitfly$thorax, fruitfly$lifespan,
xlab = "Length of Thorax (mm)", ylab = "Lifespan (days)")
dev.off()
# calculate correlation coefficient between lifespan and thorax
cor(fruitfly$thorax,fruitfly$lifespan)
# (c) # Run the regression of lifespan on thorax
regression_model_problem3 <- lm(lifespan ~ thorax, data=fruitfly)
# get summary statistics for linear regression model
summary(regression_model_problem3)
library(xtable)
xtable(summary(lm)
)
xtable(lm)
xtable(regression_model_problem3)
xtable(regression_model_problem3, 2)
xtable(regression_model_problem3, digits=2)
# (e) calculate the confidence interval by formula
pointEst <- 144.33
se <- 15.77
# get the t-score
t <- qt(0.95,25*5-2)
# create the upper and lower bounds
lower_CI <- pointEst - t*se
upper_CI <- pointEst + t*se
c(lower_CI, pointEst, upper_CI)
# now try confint
confint(regression_model_problem3, "thorax", level = 0.9)
# (f) prediction
# store the two variables in x and y
predict_data <- fruitfly
# Use the predict() function to predict the average lifespan of fruitflies
predict(lm(lifespan ~ thorax), newdata = data.frame(thorax=0.8), interval = "confidence", level = 0.90)
# (f) prediction
# store the two variables in x and y
x <- fruitfly$thorax
y <- fruitfly$lifespan
# Use the predict() function to predict an individual fruitfly lifespan
predict(lm(y~x), newdata = data.frame(x=0.8), interval = "prediction", level = 0.90)
# Use the predict() function to predict the average lifespan of fruitflies
predict(lm(y~x), newdata = data.frame(x=0.8), interval = "confidence", level = 0.90)
knitr::opts_chunk$set(echo = TRUE)
newSeq<-data.frame(x=seq(0.64,0.94,0.003))
# Use the predict() function to find the fitted values and prediction and confidence intervals
prep.a<-predict(lm(y~x), newdata = newSeq,  interval = "confidence")
prep.i<-predict(lm(y~x), newdata = newSeq,  interval = "prediction")
# Draw a plot to show the fitted values of lifespan, the prediction and confidence intervals
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l", col = c("red", "blue", "green", "orange", "purple"), xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Values", "Lower Bound for Confidence Interval", "Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval", "Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3), col = c("red", "blue", "green", "orange", "purple"), cex = 0.55)
newSeq<-data.frame(x=seq(0.64,0.94,0.003))
# Use the predict() function to find the fitted values and prediction and confidence intervals
prep.a<-predict(lm(y~x), newdata = newSeq,  interval = "confidence")
prep.i<-predict(lm(y~x), newdata = newSeq,  interval = "prediction")
# Draw a plot to show the fitted values of lifespan, the prediction and confidence intervals
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l", col = c("red", "blue", "green", "orange", "purple"), xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
summary(x)
# open a plot to show the fitted values of lifespan, the prediction and confidence intervals
plot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("red", "blue", "green", "orange", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Values", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("red", "blue", "green", "orange", "purple"), cex = 0.55)
# open a plot to show the fitted values of lifespan, the prediction and confidence intervals
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("red", "blue", "green", "orange", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Values", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("red", "blue", "green", "orange", "purple"), cex = 0.55)
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Values", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("red", "blue", "green", "orange", "purple"), cex = 0.75)
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Values", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("red", "blue", "green", "orange", "purple"), cex = 0.85)
# open a plot to show the fitted values of lifespan, the prediction and confidence intervals
pdf("plot3_g.pdf")
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("red", "blue", "green", "orange", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Value", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("red", "blue", "green", "orange", "purple"), cex = 0.85)
dev.off()
# open a plot to show the fitted values of lifespan, the prediction and confidence intervals
pdf("plot3_g.pdf")
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("red", "blue", "green", "orange", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Value", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("black", "blue", "green", "red", "purple"), cex = 0.85)
dev.off()
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("red", "blue", "green", "orange", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Value", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("black", "blue", "green", "red", "purple"), cex = 0.85)
# open a plot to show the fitted values of lifespan, the prediction and confidence intervals
pdf("plot3_g.pdf")
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("black", "blue", "green", "red", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Value", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("black", "blue", "green", "red", "purple"), cex = 0.85)
dev.off()
