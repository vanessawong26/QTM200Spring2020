# load in new data
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
# Step 1: Calculate the standard error
SE <- sd(y)/sqrt(n)
# Step 2: Calculate the test statistic for this hypothesis testing of mean
t <- (mean(y) - 100)/SE
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = T)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = F)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
t
pvalue
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = T)
pvalue
(2*2)^-1
(2*2)*((2*2)^-1)
# multiplication example
X <- matrix(c(2, 0, 1, 5, 1, 3), nrow=2, byrow = T)
View(X)
Y <- matrix(c(1, 4, -1, 3, 0, 2), nrow=3, byrow = T)
X*Y
X%*%Y
t(X)
X
# t() takes transpose
t(X)
t(X)%*%X
(t(X)%*%X)^-1
(t(X)%*%X)^-1 %*% (t(X)%*%X)
inv((t(X)%*%X)) %*% (t(X)%*%X)
solve((t(X)%*%X)) %*% (t(X)%*%X)
solve((t(X)%*%X))
(t(X)%*%X)
solve(t(X)%*%X)
X
X%*%X
t(X)%*%X
solve(t(X)%*%X)
solve(t(X))
X <- matrix(c(2, 0, 1, 5), nrow=2, byrow = T)
X
solve(t(X))
solve((t(X)%*%X)) %*% (t(X)%*%X)
?rnorm
# create data
Y <- rnorm(100, mean=10, sd=10)
hist(Y)
# create data
E <- rnorm(100, mean=0, sd=1.5)
X <- data.frame(x1=rnorm(100, mean=10, sd=5), x2=rnorm(100, mean=5, sd=10))
Y <- 10 + X$x1*5 + X$x2*2.75 + E
View(X)
View(X)
solve((t(X)%*%X)) %*% (X%*%Y)
solve((t(X)%*%X)) %*% (t(X)%*%Y)
(t(X)%*%Y)
solve((t(X)%*%X))
t(X)%*%X
X
t(X)
X <- matrix(x1=rnorm(100, mean=10, sd=5), x2=rnorm(100, mean=5, sd=10))
X <- matrix(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10), nrow=100)
View(X)
X <- matrix(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10), nrow=100, byrow = T)
X <- matrix(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10), nrow=100, byrow = F)
View(X)
rnorm(100, mean=10, sd=5)
X <- cbind(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10))
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1.5)
X <- cbind(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10))
Y <- 10 + X$x1*5 + X$x2*2.75 + E
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1.5)
X <- cbind(rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
solve((t(X)%*%X)) %*% (t(X)%*%Y)
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
betas
X
residuals <- Y - t(betas)%*%X
t(betas)
X
betas
betas%*%X
X
lm(Y~X[,1] + X[,2])
rep(1, 100)
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1.5)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
betas%*%X
betas
lm(Y~X[,1] + X[,2])
solve(t(X) %*% X) %*% (t(X) %*% Y)
# check answer
lm(Y ~ 1 + X[,1] + X[,2])
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1.5)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=5, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
# check answer
lm(Y ~ 1 + X[,1] + X[,2])
betas
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1.5)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=50, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
# check answer
lm(Y ~ 1 + X[,1] + X[,2])
betas
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=50, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
# check answer
lm(Y ~ 1 + X[,1] + X[,2])
X[,1]
# check answer
lm(Y ~ X[,1] + X[,2] + X[,3])
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=50, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
# check answer
lm(Y ~ X[,1] + X[,2] + X[,3])
# check answer
lm(Y ~ X[,2] + X[,3])
# create data
set.seed(5)
E <- rnorm(100, mean=0, sd=1)
X <- cbind(rep(1, 100), rnorm(100, mean=10, sd=5), rnorm(100, mean=50, sd=10))
Y <- 10 + X[,1]*5 + X[,2]*2.75 + E
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
residuals <- Y - betas%*%X
# check answer
lm(Y ~ X[,2] + X[,3])
betas
betas%*%X
betas
test <- lm(Y ~ X[,2] + X[,3])
test$coefficients
# check coefficients
lm(Y ~ X[,2] + X[,3])$coefficients
betas
X
betas%*%X
betas%*%X[,2:4]
betas%*%X[,c(2,3,4)]
X[,c(2,3,4)]
X[,c(2,3)]
betas%*%X[,c(2,3)]
sqrt(diag(vcov(lm(Y ~ X[,2] + X[,3]))))
lm(Y ~ X[,2] + X[,3]
)
test <- lm(Y ~ X[,2] + X[,3]
_
test <- lm(Y ~ X[,2] + X[,3])
summary(test)
X%*%betas
# calculate SEs for betas
# estimate of sigma-squared
dSigmaSq <- sum((Y - X%*%betas)^2)/(nrow(X)-ncol(X))
?chol
var_covar_mat <- sigma_squared*chol2inv(chol(t(X)%*%X))
# calculate SEs for betas
# estimate of sigma-squared
sigma_squared <- sum((Y - X%*%betas)^2)/(nrow(X)-ncol(X))
var_covar_mat <- sigma_squared*chol2inv(chol(t(X)%*%X))
# standard errors for coefficient estimates
vStdErr <- sqrt(diag(var_covar_mat))
vStdErr
# or get them from R
sqrt(diag(vcov(lm(Y ~ X[,2] + X[,3]))))
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
# standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
# or get them from R
sqrt(diag(vcov(lm(Y ~ X[,2] + X[,3]))))
SEs
sigma_squared
test <- lm(Y ~ X[,2] + X[,3])
summary(lm(Y ~ X[,2] + X[,3]))
sqrt(0.9468)
0.9468^2
# or get them from R
sqrt(diag(vcov(lm(Y ~ X[,2] + X[,3]))))
test$residuals
sum(test$residuals)
sum(test$residuals)^2
sum(test$residuals^2)
test$sigma
test$df.residual
summary(test)$sigma
summary(test)$sigma^2
# check that we got it right
summary(lm(Y ~ X[,2] + X[,3]))$sigma
# check that we got it right
summary(lm(Y ~ X[,2] + X[,3]))$sigma^2
# check that we got it right
summary(lm(Y ~ X[,2] + X[,3]))$sigma^2
sigma_squared
# create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
# get from R too
vcov(lm(Y ~ X[,2] + X[,3]))
var_covar_mat
# standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
SEs
# or get them from R
sqrt(diag(vcov(lm(Y ~ X[,2] + X[,3]))))
test$residuals
test$coefficients
test$effects
summary(test)$coefficients
summary(test)$stderrors
test <- summary(test)
test
test$terms
test$coefficients
test$coefficients[,2]
summary(lm(Y ~ X[,2] + X[,3]))$coefficients[,2]
install.packages("swissparl")
library(swissparl)
swissparl::get_tables()
swissparl::get_tables("Transcript")
swissparl::get_variables("Transcript")
swissparl::get_variables("Transcript", rows=1)
swissparl::get_variables("Transcript", rows=2)
swissparl::get_glimpse("Transcript", rows=2)
swissparl::get_glimpse("Transcript", rows=5)
swissparl::get_glimpse("Transcript", rows=10)
3.2 + 1.96*1.9
3.2 -1.96*1.9
3.2 -1.96*0.3
3.2 + 1.96*.3
devtools::install_github('carlson9/SentimentIt/sentimentIt')
library(sentimentIt)
?sentimentIt
devtools::install_github('zieglerjef/openEnded/openEnded')
library(openEnded)
detach("package:openEnded", unload = TRUE)
remove.packages("openEnded", lib="~/Library/R/3.6/library")
devtools::install_github('zieglerjef/openEnded/openEnded')
library(openEnded)
devtools::install_github('zieglerjef/openEnded')
devtools::install_github('zieglerjef/openEnded/openEnded')
install_github("Displayr/flipPlots")
library(devtools)
devtools::install_github('zieglerjef/openEnded/')
devtools::install_github('zieglerjef/openEnded')
devtools::install_github('zieglerjef/openEnded')
library(car)
data(Prestige)
help(Prestige)
Prestige$type
mexico_elections <- read.csv("MexicoMuniData.csv", stringsAsFactors = F, header=T)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS6")
#####################
# Problem 1
#####################
cholesterol <- read.csv("cholesterol.csv", stringsAsFactors = F, header=T)
#####################
# Problem 2
#####################
gdpChange <- read.csv("gdpChange.csv", stringsAsFactors = F, header=T)
gdpChange
gdpChange$GDPWdiff
ifelse(gdpChange$GDPWdiff >0, "positive", ifelse(gdpChange$GDPWdiff <0, "negative", "no change"))
gdpChange$GDPWdiff <- as.factor(ifelse(gdpChange$GDPWdiff >0, "positive", ifelse(gdpChange$GDPWdiff <0, "negative", "no change")))
gdpChange$GDPWdiff
write.csv(gdpChange, "gdpChange.csv")
