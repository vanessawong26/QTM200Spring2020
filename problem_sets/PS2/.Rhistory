#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS2")
#####################
# Problem 1
#####################
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(x)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# run chi square test with built in function
chisq.test(trafficViolations) # chisq.test(trafficViolations)$stdres
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(x)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
browser()
grandSum <- sum(trafficTab)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
sum(trafficTab)
trafficTab
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(trafficTab)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(trafficTab)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
browser()
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(trafficTab)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
browser()
STATISTIC <- sum((abs(x - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = x,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
expectedValues
sum((abs(table - expectedValues))^2 / expectedValues)
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
trafficTab <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(trafficTab)
sumRow <- rowSums(trafficTab)
sumCol <- colSums(trafficTab)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(trafficTab)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
# browser()
STATISTIC <- sum((abs(table - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(trafficTab) - 1L) * (ncol(trafficTab) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = table,
expected = E))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
# browser()
STATISTIC <- sum((abs(table - expectedValues))^2 / expectedValues)
PARAMETER <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
# return values
return(list(statistic = STATISTIC,
df = PARAMETER,
p.value = PVAL,
observed = observedValues,
expected = expectedValues))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
# run chi square test with built in function
chisq.test(trafficViolations) # chisq.test(trafficViolations)$stdres
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
test_statistic <- sum((abs(table - expectedValues))^2 / expectedValues)
df <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
# return values
return(list(statistic = test_statistic,
df = df,
p.value = p_value,
observed = observedValues,
expected = expectedValues))
}
# run function on trafficViolations matrix
byHandChiSquare(table=trafficViolations)
chisq.test(trafficViolations)$stdres
# run chi square test with built in function
chisq.test(trafficViolations)
# use function to extract standardized residuals
chisq.test(trafficViolations)$stdres
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# read in women data from online .csv
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# run regression model with water regressed on whether there are reserved seats for women
regression_model1 <- lm(water ~ reserved, data = women)
# get summary of model with coefficient estimates
summary(mod)
# get summary of model with coefficient estimates
summary(regression_model1)
