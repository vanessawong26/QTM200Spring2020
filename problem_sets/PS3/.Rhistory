2+2
#-------------------------------------------------------------------------------
# R can be used to generate numbers
#-------------------------------------------------------------------------------
1:20
x <- c(1,2,3,6,7)
y <- c(1:50)
y^2
z <- y^2
length(z)
print(z)
sum(z)
mean(z)
source("http://www.openintro.org/stat/data/arbuthnot.R")
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
View(arbuthnot)
head(arbuthnot)
tail(arbuthnot)
dim(arbuthnot)
yrbss2013 <- read.csv("~/Downloads/yrbss2013.csv", header=FALSE)
View(yrbss2013)
yrbss2013
View(yrbss2013)
view(yrbss2013)
view(yrbss2013)
yrbss2013 <- read.csv("~/Downloads/yrbss2013.csv")
View(yrbss2013)
view(yrbss2013)
str(yrbss2013)
yrbss2013$bmi
yrbss2013$bmi[12]
#integer=whole number
#factor= categoricals
yrbss2013$days_drink > yrbss2013$days_smoke
sum(yrbss2013$days_drink > yrbss2013$days_smoke)
?plot
plot(x = yrbss2013$days_smoke,
y = yrbss2013$weight_kg)
mean(y)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("stringr"),  pkgTest)
# set working directory
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS1")
#####################
# Problem 1
#####################
incumbents <- read.csv(incumbents_subset.csv)
incumbents <- read.csv(incumbents_subset.csv)
# set working directory, import datasets
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS1")
incumbents <- read.csv(incumbents_subset.csv)
# set working directory, import datasets
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS3")
incumbents <- read.csv(incumbents_subset.csv)
incumbents <- read.csv("incumbents_subset.csv")
ymean <- mean(incumbents$voteshare)
xmean <- mean(incumbents$difflog)
ysum <- sum(incumbents$voteshare)
xsum <- sum(incumbents$difflog)
yy <- (incumbents$voteshare) - (ymean)
xx <- (incumbents$difflog) - (xmean)
yyxxsum <- sum(yy*xx)
xxsq <- (xx)^2
sumxxsq <- sum(xxsq)
betaincumbs <- yyxxsum/sumxxsq
betaincumbs
# beta = 0.0417
betaincumbs <- ymean - (betaincumbs*xmean)
betaincumbs
# beta = 0.0417
alphaincumbs <- ymean - (betaincumbs*xmean)
betaincumbs <- yyxxsum/sumxxsq
betaincumbs
# beta = 0.0417
alphaincumbs <- ymean - (betaincumbs*xmean)
alphaincumbs
# alpha = 0.5790
# linear model: y = 0.5790 + 0.0417x
# check work
incumbreg <- lm(incumbents$voteshare ~ incumbents$difflog)
incumbreg
# make a scatterplot of the two variables and add the regression line
plot(incumbreg)
xlab=difflog, ylab=voteshare)
plot(incumbents$difflog, incumbents$voteshare,
xlab="difflog", ylab="voteshare")
abline(a=0.5790, b=0.0417, col="red")
# save the residuals of the model in a separate object
residuals <- (incumbents$voteshare) - (ymean)
residuals
residscheck <- residuals(incumbreg)
residscheck
residuals
residscheck
y2mean <- incumbents$presvote
y2mean <- mean(incumbents$presvote)
y2sum <- sum(incumbents$presvote)
yy2 <- (incumbents$presvote) - y2mean
yyxxsum2 <- sum(xx*yy2)
betaincumbs2 <- yyxxsum2/sumxxsq
betaincumbs2
# beta = 0.0238
alphaincumbs2 <- y2mean - (betaincumbs2*xmean)
alphaincumbs2
# alpha = 0.5076
incumbreg2 <- lm(incumbents$presvote ~ incumbents$difflog)
incumbreg2
# make a scatterplot of the two variables and add the regression line
plot(incumbents$difflog, incumbents$presvote,
xlab="difflog", ylab="presvote")
abline(a=0.5076, b=0.0238, col="red")
#save the residuals of the model in a separate object
resids2 <- residuals(incumbreg2)
resids2
# run a regression where the outcome variable is voteshare and the explanatory variable is presvote
xmean3 <- mean(incumbents$presvote)
ymean3 <- mean(incumbents$voteshare)
xsum3 <- sum(incumbents$presvote)
ysum3 <- sum(incumbents$voteshare)
yy3 <- (incumbents$voteshare) - (ymean3)
xx3 <- (incumbents$presvote) - (xmean3)
yyxxsum3 <- sum(yy3*xx3)
xxsq3 <- (xx3)^2
sumxxsq3 <- sum(xxsq3)
beta3 <- yyxxsum3/sumxxsq3
beta3
# beta = 0.3880
alpha3 <- ymean3 - (beta3*xmean3)
alpha3
# alpha = 0.4413
# linear model: y= 0.4413 + 0.3880x
# check work
reg3 <- lm(incumbents$voteshare~incumbents$presvote)
reg3
# make a scatterplot of the two variables and add the regression line
plot(incumbents$presvote, incumbents$voteshare,
xlab="presvote", ylab="voteshare")
abline(a=0.4413, b=0.3880, col="red")
# run a regression where the outcome variable is the residuals from Q1 and the explantory variable is the residuals from Q2
reg4 <- lm(residscheck~resids2)
reg4
# run a regression where the outcome variable is the residuals from Q1 and the explantory variable is the residuals from Q2
xmean4 <- mean(resids2)
ymean4 <- mean(residscheck)
xsum4 <- sum(resids2)
ysum4 <- sum(residscheck)
yy4 <- residscheck - ymean4
xx4 <- resids2 - xmean4
yyxxsum4 <- sum(yy4*xx4)
xxsq4 <- (xx4)^2
sumxxsq4 <- sum(xxsq4)
beta4 <- yyxxsum4/sumxxsq4
beta4 <- yyxxsum4/sumxxsq4
beta4
xmean4 <- mean(resids2)
ymean4 <- mean(residscheck)
xsum4 <- sum(resids2)
ysum4 <- sum(residscheck)
yy4 <- residscheck - ymean4
xx4 <- resids2 - xmean4
yyxxsum4 <- sum(yy4*xx4)
xxsq4 <- (xx4)^2
sumxxsq4 <- sum(xxsq4)
beta4 <- yyxxsum4/sumxxsq4
beta4
# beta = 0.2569
alpha4 <- ymean4 - (beta4*xmean4)
alpha4
# alpha = -4.939 x 10^(-18)
reg4 <- lm(residscheck ~ resids2)
reg4
alpha4
xmean4 <- mean(resids2)
ymean4 <- mean(residscheck)
xsum4 <- sum(resids2)
ysum4 <- sum(residscheck)
yy4 <- residscheck - (ymean4)
xx4 <- resids2 - (xmean4)
yyxxsum4 <- sum(yy4*xx4)
xxsq4 <- (xx4)^2
sumxxsq4 <- sum(xxsq4)
beta4 <- yyxxsum4/sumxxsq4
beta4
# beta = 0.2569
alpha4 <- ymean4 - (beta4*xmean4)
alpha4
# alpha = -4.939 x 10^(-18)
reg4 <- lm(residscheck ~ resids2)
reg4
# make a scatterplot of the two reisduals and add the regression line
plot(resids2, residscheck,
xlab="Q2 Residuals", ylab="Q1 Residuals")
abline(reg4)
abline(reg4, col="red")
summary(reg4)
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)$coefficients
# run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote
X <- cbind(incumbents$difflog, incumbents$presvote)
betas <- solve((t(X)%*%X)) %*% (t(X)%*%incumbents$voteshare)
betas
xmatrix <- matrix(c("X"), nrow=2, byrow=T)
View(xmatrix)
xmatrix <- matrix(c(incumbents$difflog, incumbents$presvote), nrow=2, byrow=T)
View(xmatrix)
View(incumbents)
#row1 = difflog
#row2 = presvote
betas <- solve((t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
betas
View(betas)
View(betas)
View(betas)
View(betas)
View(betas)
View(betas)
View(betas)
View(betas)
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
#row1 = difflog
#row2 = presvote
betas <- solve(1/(t(xmatrix)%*%xmatrix)) %*% (t(xmatrix)%*%incumbents$voteshare)
betas
View(betas)
View(betas)
