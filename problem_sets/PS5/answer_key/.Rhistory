#Method 2
confint(lm2, "x", level = 0.90)
#predict the average lifespan for thorax = 0.8 and the respective confidence interval
predict(lm2, newdata=data.frame(x=0.8), df = 123, interval = "confidence", level = 0.90)
ggplot(data = data3, aes(x = thorax, y = lifespan)) +
geom_point() +
stat_smooth(method = "lm", col = "dodgerblue3") +
theme(panel.background = element_rect(fill = "white"),
axis.line.x=element_line(),
axis.line.y=element_line()) +
ggtitle("Linear Model Fitted to Data")
# Question 1
#Chi-squared test of indepndence
tbl <- matrix(c(14, 6, 7, 7, 7, 1), nrow=2, ncol=3)
rownames(tbl) = c("Upper class", "Lower class")
colnames(tbl) = c("Not Stopped", "Bribe requested", "Stopped/given warning")
tbl
chisq<- chisq.test(tbl)
pchisq(3.4125, df=2, lower.tail = FALSE)
#standardized residuals
observed <- chisq$observed
observed
expected <- chisq$expected
expected
se <- sqrt(13.333*(1-(27/42))*(1-(21/42)))
(14-13.33333)/se
chisq$stdres
tbl
chisq<- chisq.test(tbl)
pchisq(3.4125, df=2, lower.tail = FALSE)
##Question 1A:
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X #Creation of Matrix
no_stop_sum <- sum(X[,1])
no_stop_sum #21
bribe_sum <- sum(X[,2])
bribe_sum #13
stopped_sum <- sum(X[,3])
stopped_sum #8
upper_sum <- sum(X[1,])
upper_sum #27
lower_sum <- sum(X[2,])
lower_sum #15
#Getting total for each row
sum(upper_sum, lower_sum) #Matrix total is 42
#now remaking matrix, to have column and row totals for observed values
new_x = matrix(c(14, 7, 21, 6, 7, 13, 7, 1, 8, 27, 15, 42), nrow = 3, ncol = 4)
colnames(new_x) <- c("Not Stopped", "Bribe requested", "Stopped/given warning", "Column Total")
rownames(new_x) <- c("Upper Class", "Lower Class", "Row Total")
new_x #Creation of Matrix
#to calculate expected values for chi squared test = (row total/grand sum) * column total
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #13.5
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #7.5
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #8.36
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #4.64
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #5.14
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #2.86
#creating matrix of expected values
expected_values = matrix(c(13.5, 7.5, 8.36, 4.64, 5.14, 2.86), nrow = 2, ncol = 3)
expected_values
#calculating chi squared directly
sum(((X - expected_values)^2) / expected_values) #Chi squared values is 3.801141
#Using chi squared function in R to test if values are close, which they are with the function outputting 3.7912
chisq.test(X)
#calculating p-value with chi squared value = 3.801141, df= (2-1)(3-1), and lower tail = false, as we only want the upper end due to distribution type
pchisq(3.801141, 2, lower.tail = F)
##1C
#calculating standardized residuals and want to see the matrixes again
new_x
expected_values
A_one = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values[1,1])*(1-(27/42))* (1-(21/42))))
A_one
A_two = ((X[2,1] - expected_values[2,1])/ (sqrt(expected_values[2,1])*(1-(15/42))* (1-(21/42))))
A_two
B_one = ((X[1,2] - expected_values[1,2])/ (sqrt(expected_values[1,2])*(1-(27/42))* (1-(13/42))))
B_one
B_two = ((X[2,2] - expected_values[2,2])/ (sqrt(expected_values[2,2])*(1-(15/42))* (1-(13/42))))
B_two
C_one = ((X[1,3] - expected_values[1,3])/ (sqrt(expected_values[1,3])*(1-(27/42))* (1-(8/42))))
C_one
C_two = ((X[2,3] - expected_values[2,3])/ (sqrt(expected_values[2,3])*(1-(15/42))* (1-(8/42))))
C_two
#creating matrix for standardized residuals
standardized_matrix = matrix(c(0.762, -0.568, -3.310, 2.468, 2.838, -2.113), nrow=2, ncol=3)
#creating matrix for standardized residuals
standardized_matrix = matrix(c(0.762, -0.568, -3.310, 2.468, 2.838, -2.113), nrow=2, ncol=3)
colnames(standardized_matrix) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(standardized_matrix) <- c("Upper Class", "Lower Class")
standardized_matrix #Creation of Matrix
#####################
# Problem 1
#####################
#attempt 1
Upperclass <- rbind(c(14,6,7))
Lowerclass <- rbind(c(7,7,1))
result <- c('Not Stopped', 'Bribe Requested', 'Stopped/given warning')
crossroad.data <- data.frame(Upperclass, Lowerclass, result)
str(crossroad.data)
crossroad.data
chisq <- chisq.test(crossroad.data$Upperclass,crossroad.data$Lowerclass)
chisq
#attempt 2
Upperclass <- rbind(c(14,6,7))
Lowerclass <- rbind(c(7,7,1))
result <- as.factor(c('Not stopped','Bribe requested','Stopped/given warning'))
crossroad.data <- data.frame(Upperclass,Lowerclass,result)
str(crossroad.data)
crossroad.data
chisq <- chisq.test(crossroad.data$Upperclass,crossroad.data$Lowerclass)
chisq
#attempt 3
class <- rbind(c(14,6,7),c(7,7,1))
level <- as.factor(c('upperclass','lowerclass'))
outcome <- c('notstopped','briberequested','givenwarning')
crossroads.data <- data.frame(class,level,outcome)
str(crossroads.data)
crossroads.data
chisq <- chisq.test(crossroads.data$notstopped,crossroads.data$briberequested,crossroads.data$givenwarning)
chisq
#finally! (part a and b)
r1 = c(14,6,7)
r2 = c(7,7,1)
rows = 2
corruption = matrix(c(r1,r2),
nrow = rows,
byrow = TRUE)
rownames(corruption) = c("upperclas","lowerclass")
colnames(corruption) = c("notstopped", "briberequested", "givenwarning")
corruption
chisq.test(corruption,
correct = TRUE)
chisq
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway", "ggplot2"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
qqPlot(model1, ylab="Studentized Residuals")
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway", "ggplot2"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
qqPlot(model1, ylab="Studentized Residuals")
lapply(c("faraway", "ggplot2", "car"),  pkgTest)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway", "ggplot2", "car"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
# open up plot of residuals and fitted values
pdf("constant_variance1.pdf")
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
dev.off()
pdf("constant_variance2.pdf")
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
dev.off()
qqPlot(model1, ylab="Studentized Residuals")
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
qqline(.stdresid)
model1$stdresid
qqnorm(model1)
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
qqPlot(model1, ylab="Studentized Residuals")
# observations of concern (h_i > 2*mean(h))
hat.concern <- hatvalues(model1) [which(hatvalues(model1) > 2 * mean(hatvalues(model1)))]
# plot h values
plot(hatvalues(model1), main="Figure 2")
# h values of concern
abline(h=2*mean(hatvalues(model1)), lty=2)
hat.concern
outlierTest(model1)
# find Cook's distance for each observation
cook <- influence.measures(model1)[[1]][,8]
# observations w/ cook distance > 4 / (50 - 4 - 1)
cook.concern <- cook [which(cook > 4 / (50 - 4 - 1))]
# find cov.ratio
cov.ratio <-influence.measures(model1)[[1]][,7]
# observations w/ cov.ratio +/- 2 standard deviations from mean cov.ratio (~ 1.129)
cov.ratio.concern <- cov.ratio [which(cov.ratio > 1 + 2*sd(cov.ratio),
cov.ratio < 1 - 2*sd(cov.ratio))]
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway", "ggplot2", "car", "xtable"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
# open up plot of residuals and fitted values
pdf("constant_variance1.pdf")
plot(fitted(model1), resid(model1),
ylab="Studentized Residuals", xlab="Fitted Values")
abline(0, 0, lty=2)
dev.off()
pdf("constant_variance2.pdf")
ggplot(model1, aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess", col="red") +
geom_hline(yintercept=0, col="black", linetype="dashed") +
labs(x="Fitted Values", y="Studentized Residuals") +
theme_classic()
dev.off()
#####################
# Problem B
#####################
# create quantile comparison plot check normality of studentized residuals
pdf("QQplot.pdf")
qqPlot(model1, ylab="Studentized Residuals")
dev.off()
pdf("QQplot2.pdf")
ggplot(model1, aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE) +
geom_abline(aes(qqline(.stdresid))) +
labs(x="Theoretical Quantiles", y="Standardized Residuals") +
theme_classic()
dev.off()
#####################
# Problem C
#####################
# observations of concern (h_i > 2*mean(h))
hat.concern <- hatvalues(model1) [which(hatvalues(model1) > 2 * mean(hatvalues(model1)))]
# plot h values
plot(hatvalues(model1), main="Figure 2")
# h values of concern
abline(h=2*mean(hatvalues(model1)), lty=2)
# To check for leverage points, we can look at the hat values of each observation (remember that hat values of concern are $h_i> 2\bar{h}$). Looking at figure 2 and table 1, there are at least 4 observations that may be exerting leverage on our linear estimation.
# \begin{center}
# Table 1
#
# \begin{tabular}{rr}
# \hline
# Observation & Hat values\\
# \hline
# 31 & 0.24 \\
# 33 & 0.22 \\
# 35 & 0.31 \\
# 42 & 0.30 \\
# \hline
# \end{tabular}
# \end{center}
#####################
# Problem D
#####################
# Check for outliers
outlierTest(model1)
#####################
# Problem E
#####################
# Check for influential points
# find Cook's distance for each observation
cook <- influence.measures(model1)[[1]][,8]
# observations w/ cook distance > 4 / (50 - 4 - 1)
cook.concern <- cook [which(cook > 4 / (50 - 4 - 1))]
# find cov.ratio
cov.ratio <-influence.measures(model1)[[1]][,7]
# observations w/ cov.ratio +/- 2 standard deviations from mean cov.ratio (~ 1.129)
cov.ratio.concern <- cov.ratio [which(cov.ratio > 1 + 2*sd(cov.ratio),
cov.ratio < 1 - 2*sd(cov.ratio))]
# create output tables
table.1 <- xtable(cook)
print(table.1,floating=FALSE)
# influence plot through car package
influencePlot(model1, scale=10, xlab="Hat-Values", ylab="Studentized Residuals")
# find Cook's distance for each observation
cook <- influence.measures(model1)[[1]][,8]
# observations w/ cook distance > 4 / (50 - 4 - 1)
cook.concern <- cook [which(cook > 4 / (50 - 4 - 1))]
# find cov.ratio
cov.ratio <-influence.measures(model1)[[1]][,7]
# observations w/ cov.ratio +/- 2 standard deviations from mean cov.ratio (~ 1.129)
cov.ratio.concern <- cov.ratio [which(cov.ratio > 1 + 2*sd(cov.ratio),
cov.ratio < 1 - 2*sd(cov.ratio))]
# create output tables
table.1 <- xtable(cook)
cook
class(cook)
xtable(cook)
table(cook)
xtable(table(cook))
# create output tables
print(table.1,floating=FALSE)
# influence plot through car package
influencePlot(model1, scale=10, xlab="Hat-Values", ylab="Studentized Residuals")
cov.ratio.concern
cov.ratio
cook.concern
# influence plot through car package
pdf("bubble_plot.pdf")
influencePlot(model1, scale=10, xlab="Hat-Values", ylab="Studentized Residuals")
dev.off()
pdf("outlier_test.pdf")
outlierTest(model1)
dev.off()
# plot h values
pdf("hat_values.pdf")
plot(hatvalues(model1), main="Figure 2")
# h values of concern
abline(h=2*mean(hatvalues(model1)), lty=2)
dev.off()
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway", "ggplot2", "car", "xtable"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
#####################
# Problem A
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, data=gamble)
pdf("outlier_test.pdf")
outlierTest(model1)
dev.off()
outlierTest(model1)
outlierTest(model1)
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS4/My Problem Set 4")
install.packages("car")
library("car")
data(Prestige)
help(Prestige)
library('tidyverse')
view(Prestige)
############# Question 1 ##################
### Part A ###
#changing the variable to professional from type
summary(Prestige)
prestige_data<- Prestige %>% rename(professional = type)
view(prestige_data)
install.packages("car")
library("car")
data(Prestige)
help(Prestige)
library('tidyverse')
view(Prestige)
#changing the variable to professional from type
summary(Prestige)
prestige_data<- Prestige %>% rename(professional = type)
View(prestige_data)
prestige_data$professional
